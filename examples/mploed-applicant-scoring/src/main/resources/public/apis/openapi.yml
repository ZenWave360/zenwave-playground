openapi: 3.0.1
info:
  title: "Michael Plöd - Applicant Scoring"
  version: 0.0.1
  description: "Michael Plöd - Applicant Scoring"
  contact:
    email: email@domain.com
servers:
  - description: localhost
    url: http://localhost:8080/api
  - description: custom
    url: "{protocol}://{server}/{path}"
    variables:
      protocol:
        enum: ['http', 'https']
        default: 'http'
      server:
        default: 'localhost:8080'
      path:
        default: 'api'
tags:
  - name: "Default"
  - name: "ApplicantScoring"


paths:
  /applicant-scoring/{id}:
    get:
      operationId: getApplicationScoring
      description: "getApplicationScoring"
      tags: [ApplicantScoring]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantScoring"
    put:
      operationId: updateApplicantScoring
      description: "updateApplicantScoring"
      tags: [ApplicantScoring]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicantScoringInput"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantScoring"
  /applicant-scoring:
    post:
      operationId: createApplicantScoring
      description: "createApplicantScoring"
      tags: [ApplicantScoring]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationNumberInput"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantScoring"
  /applicant-scoring/{id}/city:
    post:
      operationId: updateCity
      description: "updateCity"
      tags: [ApplicantScoring]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityInput"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantScoring"
  /applicant-scoring/{id}/balance-at-bank:
    post:
      operationId: updateBalanceAtBank
      description: "updateBalanceAtBank"
      tags: [ApplicantScoring]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceAtBankInput"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantScoring"

components:
  schemas:
    ApplicationNumberInput:
      type: "object"
      x-business-entity: "ApplicationNumberInput"
      required:
      - "applicationNumber"
      properties:
        applicationNumber:
          type: "string"
          minLength: 3
          maxLength: 254
    CityInput:
      type: "object"
      x-business-entity: "CityInput"
      required:
      - "city"
      properties:
        city:
          type: "string"
          minLength: 3
          maxLength: 254
    BalanceAtBankInput:
      type: "object"
      x-business-entity: "BalanceAtBankInput"
      required:
      - "balanceAtBank"
      properties:
        balanceAtBank:
          type: "number"
          format: "double"
    ApplicantScoringInput:
      type: "object"
      x-business-entity: "ApplicantScoringInput"
      required:
      - "applicationNumber"
      - "city"
      - "balanceAtBank"
      properties:
        applicationNumber:
          type: "string"
          minLength: 3
          maxLength: 254
        city:
          type: "string"
          minLength: 3
          maxLength: 254
        balanceAtBank:
          type: "number"
          format: "double"
    ApplicantScoring:
      type: "object"
      x-business-entity: "ApplicantScoring"
      properties:
        id:
          type: "integer"
          format: "int64"
          readOnly: true
        version:
          type: "integer"
          default: "null"
          description: "Version of the document (required in PUT for concurrency control,\
            \ should be null in POSTs)."
        applicationNumber:
          $ref: "#/components/schemas/ApplicationNumber"
        city:
          $ref: "#/components/schemas/City"
        balanceAtBank:
          $ref: "#/components/schemas/BalanceAtBank"
    ApplicationNumber:
      type: "object"
      x-business-entity: "ApplicationNumber"
      required:
      - "applicationNumber"
      properties:
        applicationNumber:
          type: "string"
          minLength: 3
          maxLength: 254
    City:
      type: "object"
      x-business-entity: "City"
      properties:
        city:
          type: "string"
    BalanceAtBank:
      type: "object"
      x-business-entity: "BalanceAtBank"
      properties:
        balanceAtBank:
          type: "number"
          format: "double"

    Page:
      type: object
      required:
        - "content"
        - "totalElements"
        - "totalPages"
        - "size"
        - "number"
      properties:
        number:
          type: integer
          minimum: 0
        numberOfElements:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 0
          maximum: 200
          multipleOf: 25
        totalElements:
          type: integer
        totalPages:
          type: integer

  parameters:
    page:
      name: page
      in: query
      description: The number of results page
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: The number of results in a single page
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: The number of results page
      schema:
        type: array
        items:
          type: string

  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - basicAuth: []  # <-- use the same name here
  - bearerAuth: []  # <-- use the same name here
