<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.0</version> <!-- lookup parent from repository -->
	</parent>

	<groupId>io.zenwave360.example</groupId>
	<artifactId>zenwave-customer-jpa-example</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ZenWave Customer JPA Example</name>
	<description>ZenWave Customer JPA Example</description>

	<repositories>
		<repository>
			<id>confluent</id>
			<url>https://packages.confluent.io/maven/</url>
		</repository>
		<repository>
			<id>gh</id>
			<url>https://raw.githubusercontent.com/ZenWave360/maven-snapshots/refs/heads/main</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<properties>
		<java.version>21</java.version>

		<basePackage>io.zenwave360.example</basePackage>
		<openApiApiPackage>${basePackage}.adapters.web</openApiApiPackage>
		<openApiModelPackage>${basePackage}.adapters.web.model</openApiModelPackage>
		<asyncApiModelPackage>${basePackage}.core.outbound.events.dtos</asyncApiModelPackage>
		<asyncApiProducerApiPackage>${basePackage}.core.outbound.events</asyncApiProducerApiPackage>
		<asyncApiConsumerApiPackage>${basePackage}.adapters.commands</asyncApiConsumerApiPackage>

		<spring-boot.version>${project.parent.version}</spring-boot.version>
		<spring-cloud.version>2024.0.0</spring-cloud.version>
		<spring-cloud-stream-schema.version>2.2.1.RELEASE</spring-cloud-stream-schema.version>
		<spring-modulith.version>1.3.0</spring-modulith.version>

		<zenwave.version>1.7.0</zenwave.version>

		<jakarta.validation-api.version>3.1.0</jakarta.validation-api.version>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
		<karate.version>1.4.1</karate.version>
		<archunit-junit5.version>1.3.0</archunit-junit5.version>
		<springdoc-openapi-starter-webmvc-ui.version>2.5.0</springdoc-openapi-starter-webmvc-ui.version>
		<spring-javaformat-maven-plugin.version>0.0.43</spring-javaformat-maven-plugin.version>
		<wiremock.version>3.9.1</wiremock.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.modulith</groupId>
				<artifactId>spring-modulith-bom</artifactId>
				<version>${spring-modulith.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!-- jpa -->
		<dependency>
			<groupId>org.hibernate.orm</groupId>
			<artifactId>hibernate-ant</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- kafka -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-stream-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-schema</artifactId>
			<version>${spring-cloud-stream-schema.version}</version>
		</dependency>
		<!-- avro -->
<!--		<dependency>-->
<!--			<groupId>org.apache.avro</groupId>-->
<!--			<artifactId>avro</artifactId>-->
<!--			<version>1.11.1</version>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>com.fasterxml.jackson.dataformat</groupId>-->
<!--			<artifactId>jackson-dataformat-avro</artifactId>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>io.confluent</groupId>-->
<!--			<artifactId>kafka-avro-serializer</artifactId>-->
<!--			<version>5.3.0</version>-->
<!--		</dependency>-->
		<!-- spring modulith -->
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>io.zenwave360.sdk</groupId>
			<artifactId>spring-modulith-events-scs</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		<!-- utils -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
			<version>${jakarta.validation-api.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok-mapstruct-binding</artifactId>
			<version>${lombok-mapstruct-binding.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- swagger -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi-starter-webmvc-ui.version}</version>
		</dependency>

		<!-- test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webflux</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-core</artifactId>
			<version>${karate.version}</version>
		</dependency>

		<!-- wiremock with swagger-request-validator -->
		<dependency>
			<groupId>org.wiremock</groupId>
			<artifactId>wiremock-standalone</artifactId>
			<version>${wiremock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.oai</groupId>
			<artifactId>swagger-request-validator-wiremock</artifactId>
			<version>2.41.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-api</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Adding the engine dependency to the surefire-plugin unfortunately does not work in the current version. -->
		<!-- https://www.archunit.org/userguide/html/000_Index.html#_junit_5 -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-engine</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.spring.javaformat</groupId>
				<artifactId>spring-javaformat-maven-plugin</artifactId>
				<version>${spring-javaformat-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.12</version>
				<configuration>
					<excludes>
						<exclude>**/config/**</exclude>
						<exclude>**/*DTO.*</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- attached to Maven test phase -->
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Surefire Plugin for Unit Tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<includes>
						<include>**/*Test.java</include>
					</includes>
					<excludes>
						<exclude>**/*IT.java</exclude>
						<exclude>**/*IntegrationTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- Failsafe Plugin for Integration Tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.5.1</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<includes>
								<include>**/*IT.java</include>
								<include>**/*IntegrationTest.java</include>
							</includes>
							<excludes>
								<exclude>**/*KarateIntegrationTest.java</exclude>
							</excludes>
						</configuration>
					</execution>
					<execution>
						<!-- Failsafe Plugin for API Integration Tests (not transactional) -->
						<id>api-test</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<includes>
								<include>**/*KarateIntegrationTest.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>7.10.0</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/openapi.yml</inputSpec>
							<skipIfSpecIsUnchanged>true</skipIfSpecIsUnchanged>
							<generatorName>spring</generatorName>
							<apiPackage>${openApiApiPackage}</apiPackage>
							<modelPackage>${openApiModelPackage}</modelPackage>
							<modelNameSuffix>DTO</modelNameSuffix>
							<addCompileSourceRoot>true</addCompileSourceRoot>
							<generateSupportingFiles>false</generateSupportingFiles>
							<typeMappings>
								<typeMapping>Double=java.math.BigDecimal</typeMapping>
							</typeMappings>
							<configOptions>
								<useSpringBoot3>true</useSpringBoot3>
								<documentationProvider>none</documentationProvider>
								<openApiNullable>false</openApiNullable>
								<useOptional>true</useOptional>
								<useTags>true</useTags>
								<interfaceOnly>true</interfaceOnly>
								<skipDefaultInterface>true</skipDefaultInterface>
								<delegatePattern>false</delegatePattern>
							</configOptions>
						</configuration>
					</execution>
					<!-- Ejemplo de como generar un cliente OpenAPI usando spring-http-interface
						 ver tambien: HttpInterfacesWebClientConfig.java
					<execution>
						<id>openapi-generator-client-customers</id>
						<goals><goal>generate</goal></goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/clients/customer-openapi.yml</inputSpec>
							<generatorName>spring</generatorName>
							<library>spring-http-interface</library>
							<apiPackage>${basePackage}.customers.client</apiPackage>
							<modelPackage>${basePackage}.customers.client.model</modelPackage>
							<modelNameSuffix>DTO</modelNameSuffix>
							<addCompileSourceRoot>true</addCompileSourceRoot>
							<typeMappings>
								<typeMapping>Double=java.math.BigDecimal</typeMapping>
							</typeMappings>
							<configOptions>
								<useJakartaEe>true</useJakartaEe>
								<documentationProvider>none</documentationProvider>
								<openApiNullable>false</openApiNullable>
								<useOptional>true</useOptional>
								<useTags>true</useTags>
							</configOptions>
						</configuration>
					</execution> -->
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>asyncapi-code-generation</id>
			<activation>
				<file>
					<exists>${project.basedir}/src/main/resources/public/apis/asyncapi.yml</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.github.zenwave360.zenwave-sdk</groupId>
						<artifactId>zenwave-sdk-maven-plugin</artifactId>
						<version>${zenwave.version}</version>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/asyncapi.yml</inputSpec>
							<skip>false</skip>
							<addCompileSourceRoot>true</addCompileSourceRoot>
							<addTestCompileSourceRoot>true</addTestCompileSourceRoot>
						</configuration>
						<executions>
							<!-- DTOs -->
							<execution>
								<id>generate-asyncapi-dtos</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
								<configuration>
									<generatorName>jsonschema2pojo</generatorName>
									<configOptions>
										<modelPackage>${asyncApiModelPackage}</modelPackage>
										<jsonschema2pojo.isUseJakartaValidation>true</jsonschema2pojo.isUseJakartaValidation>
										<jsonschema2pojo.useLongIntegers>true</jsonschema2pojo.useLongIntegers>
										<jsonschema2pojo.includeAdditionalProperties>true</jsonschema2pojo.includeAdditionalProperties>
									</configOptions>
								</configuration>
							</execution>
							<!-- Generate PROVIDER -->
							<execution>
								<id>generate-asyncapi</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
								<configuration>
									<generatorName>spring-cloud-streams3</generatorName>
									<configOptions>
										<role>provider</role>
										<style>imperative</style>
										<transactionalOutbox>modulith</transactionalOutbox>
										<includeApplicationEventListener>true</includeApplicationEventListener>
										<modelPackage>${asyncApiModelPackage}</modelPackage>
										<producerApiPackage>${asyncApiProducerApiPackage}</producerApiPackage>
										<consumerApiPackage>${asyncApiConsumerApiPackage}</consumerApiPackage>
									</configOptions>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>io.github.zenwave360.zenwave-sdk.plugins</groupId>
								<artifactId>asyncapi-spring-cloud-streams3</artifactId>
								<version>${zenwave.version}</version>
							</dependency>
							<dependency>
								<groupId>io.github.zenwave360.zenwave-sdk.plugins</groupId>
								<artifactId>asyncapi-jsonschema2pojo</artifactId>
								<version>${zenwave.version}</version>
							</dependency>
						</dependencies>
					</plugin>
					<!-- Other plugins -->
<!--					<plugin>-->
<!--						<groupId>org.apache.avro</groupId>-->
<!--						<artifactId>avro-maven-plugin</artifactId>-->
<!--						<version>1.11.1</version>-->
<!--						<executions>-->
<!--							<execution>-->
<!--								<goals>-->
<!--									<goal>schema</goal>-->
<!--								</goals>-->
<!--								<phase>generate-sources</phase>-->
<!--							</execution>-->
<!--						</executions>-->
<!--						<configuration>-->
<!--							<sourceDirectory>${project.basedir}/src/main/resources/public/apis/avro</sourceDirectory>-->
<!--							<outputDirectory>${project.basedir}/target/generated-sources/avro</outputDirectory>-->
<!--							<imports>-->
<!--								<import>${project.basedir}/src/main/resources/public/apis/avro/PaymentMethodType.avsc</import>-->
<!--								<import>${project.basedir}/src/main/resources/public/apis/avro/PaymentMethod.avsc</import>-->
<!--								<import>${project.basedir}/src/main/resources/public/apis/avro/Address.avsc</import>-->
<!--							</imports>-->
<!--						</configuration>-->
<!--					</plugin>-->
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
