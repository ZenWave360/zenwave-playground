/**
 * ZenWave implementation of 'Michael Plöd - Applicant Scoring' Test Project for DDD Europe Hands-On.
 *
 * See https://github.com/mploed/aggregate-persistence
 *
 * Use zenwave-scripts.zdl to generate your code from this model definition.
 */
config {
    title "Michael Plöd - Applicant Scoring"
    basePackage "io.zenwave360.example.applicantscoring"
    persistence jpa
    databaseType postgresql

    // you can choose: DefaultProjectLayout, CleanHexagonalProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout
    layout LayeredProjectLayout

    // these should match the values of openapi-generator-maven-plugin
    // used by the OpenAPIControllersPlugin and SpringWebTestClientPlugin
    layout.openApiApiPackage "{{basePackage}}.web"
    layout.openApiModelPackage "{{basePackage}}.web.dtos"
    openApiModelNameSuffix DTO
}

/**
* ApplicantScoring aggregate root
*/
@aggregate // adds id, version + spring-data repository
@auditing // adds auditing fields to the entity
entity ApplicantScoring {
    applicationNumber ApplicationNumber {
        applicationNumber String required unique minlength(3) maxlength(254)
    }
    city City {
        city String
    }
    balanceAtBank BalanceAtBank {
        balanceAtBank BigDecimal
    }
}

input ApplicantScoringInput {
    applicationNumber String required minlength(3) maxlength(254)
    city String required minlength(3) maxlength(254)
    balanceAtBank BigDecimal required
}

input ApplicationNumberInput {
    applicationNumber String required minlength(3) maxlength(254)
}

input CityInput {
    city String required minlength(3) maxlength(254)
}

input BalanceAtBankInput {
    balanceAtBank BigDecimal required
}

@rest("/applicant-scoring")
service ApplicantScoringService for (ApplicantScoring) {
    @get("/{id}")
    getApplicationScoring(id) ApplicantScoring?

    @post
    createApplicantScoring(ApplicationNumberInput) ApplicantScoring withEvents ApplicantScoringEvent

    @post("/{id}/city")
    updateCity(id, CityInput) ApplicantScoring? withEvents ApplicantScoringEvent
    @post("/{id}/balance-at-bank")
    updateBalanceAtBank(id, BalanceAtBankInput) ApplicantScoring? withEvents ApplicantScoringEvent

    @put("/{id}")
    updateApplicantScoring(id, ApplicantScoringInput) ApplicantScoring? withEvents ApplicantScoringEvent
}

@asyncapi({ channel: "ApplicantScoringChannel", topic: "applicant-scoring" })
event ApplicantScoringEvent {
    id Long
    version Integer
    applicationNumber String required minlength(3) maxlength(254)
    city String required minlength(3) maxlength(254)
    balanceAtBank BigDecimal required
}
