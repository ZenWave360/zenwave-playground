<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
        <relativePath/>
	</parent>

	<groupId>io.example.asyncapi</groupId>
	<artifactId>provider</artifactId>
	<version>1.0.0</version>
	<name>AsyncAPI Example Provider</name>
	<description>AsyncAPI Example Provider</description>


	<properties>
		<java.version>21</java.version>

        <zenwave.version>2.2.0-SNAPSHOT</zenwave.version>

		<basePackage>io.example.asyncapi.provider</basePackage>
		<openApiApiPackage>${basePackage}.web</openApiApiPackage>
		<openApiModelPackage>${basePackage}.web.model</openApiModelPackage>

		<asyncApiModelPackage>io.example.api.dtos</asyncApiModelPackage>
		<asyncApiProducerApiPackage>${basePackage}.events</asyncApiProducerApiPackage>
		<asyncApiConsumerApiPackage>${basePackage}.adapters.commands</asyncApiConsumerApiPackage>

		<spring-boot.version>${project.parent.version}</spring-boot.version>
		<spring-cloud.version>2025.0.0</spring-cloud.version>
		<spring-cloud-stream-schema.version>2.2.1.RELEASE</spring-cloud-stream-schema.version>
        <avro.version>1.11.1</avro.version>

		<jakarta.validation-api.version>3.1.1</jakarta.validation-api.version>
		<mapstruct.version>1.6.3</mapstruct.version>
		<lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
		<karate.version>1.4.1</karate.version>
		<archunit-junit5.version>1.4.0</archunit-junit5.version>
		<springdoc-openapi-starter-webmvc-ui.version>2.8.3</springdoc-openapi-starter-webmvc-ui.version>
		<spotless-maven-plugin.version>2.44.3</spotless-maven-plugin.version>
		<palantir-java-format.version>2.55.0</palantir-java-format.version>
	</properties>

    <profiles>
        <profile>
            <id>asyncapi-avro-local-files</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <basePath>${project.basedir}/../apis</basePath>
                <asyncapi.inputSpec>${basePath}/asyncapi-avro-refs.yml</asyncapi.inputSpec>
                <asyncapi.avro.imports>${basePath}/avro/</asyncapi.avro.imports>
            </properties>
        </profile>
        <profile>
            <id>asyncapi-avro-http-files</id>
            <properties>
                <baseUrl>https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/asyncapi/apis</baseUrl>
                <asyncapi.inputSpec>${baseUrl}/asyncapi-avro-refs.yml</asyncapi.inputSpec>
                <asyncapi.avro.imports>
                    ${baseUrl}/avro/Address.avsc,
                    ${baseUrl}/avro/PaymentMethod.avsc,
                    ${baseUrl}/avro/PaymentMethodType.avsc,
                </asyncapi.avro.imports>
            </properties>
        </profile>
        <profile>
            <id>asyncapi-avro-classpath-resources</id>
            <properties>
                <basePackage>classpath:io/example/asyncapi/apis</basePackage>
                <asyncapi.inputSpec>${basePackage}/asyncapi-avro-refs.yml</asyncapi.inputSpec>
                <asyncapi.avro.imports>
                    ${basePackage}/avro/
                </asyncapi.avro.imports>
            </properties>
        </profile>
        <profile>
            <id>asyncapi-json-local-files</id>
            <properties>
                <basePath>${project.basedir}/../apis</basePath>
                <asyncapi.inputSpec>${basePath}/asyncapi-json.yml</asyncapi.inputSpec>
                <asyncapi.avro.imports />
            </properties>
        </profile>
        <profile>
            <id>asyncapi-avro-native-local-files</id>
            <properties>
                <basePath>${project.basedir}/../apis</basePath>
                <asyncapi.inputSpec>${basePath}/asyncapi-avro-native.yml</asyncapi.inputSpec>
                <asyncapi.avro.imports>${basePath}/avro/</asyncapi.avro.imports>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.zenwave360.sdk</groupId>
                <artifactId>zenwave-sdk-maven-plugin</artifactId>
                <version>${zenwave.version}</version>
                <configuration>
                    <inputSpec>${asyncapi.inputSpec}</inputSpec>
                    <skip>false</skip>
                    <addCompileSourceRoot>true</addCompileSourceRoot>
                    <addTestCompileSourceRoot>true</addTestCompileSourceRoot>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-asyncapi</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <generatorName>SpringCloudStreamsWithDtosPlugin</generatorName>
                            <configOptions>
                                <role>provider</role>
                                <modelPackage>${asyncApiModelPackage}</modelPackage>
                                <producerApiPackage>${asyncApiProducerApiPackage}</producerApiPackage>
                                <consumerApiPackage>${asyncApiConsumerApiPackage}</consumerApiPackage>
                                <avroCompilerProperties.imports>${asyncapi.avro.imports}</avroCompilerProperties.imports>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>io.zenwave360.sdk.plugins</groupId>
                        <artifactId>asyncapi-spring-cloud-streams-with-avro-json</artifactId>
                        <version>${zenwave.version}</version>
                    </dependency>
<!--                    <dependency>-->
<!--                        <groupId>org.apache.avro</groupId>-->
<!--                        <artifactId>avro-compiler</artifactId>-->
<!--                        <version>${avro.version}</version>-->
<!--                        <exclusions>-->
<!--                            <exclusion>-->
<!--                                <groupId>com.fasterxml.jackson.core</groupId>-->
<!--                                <artifactId>jackson-core</artifactId>-->
<!--                            </exclusion>-->
<!--                            <exclusion>-->
<!--                                <groupId>com.fasterxml.jackson.core</groupId>-->
<!--                                <artifactId>jackson-databind</artifactId>-->
<!--                            </exclusion>-->
<!--                        </exclusions>-->
<!--                    </dependency>-->
                    <dependency>
                        <groupId>io.example.asyncapi</groupId>
                        <artifactId>apis</artifactId>
                        <version>1.0.0</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>7.12.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <configuration>
                            <inputSpec>${project.basedir}/src/main/resources/public/apis/openapi.yml</inputSpec>
                            <skipIfSpecIsUnchanged>true</skipIfSpecIsUnchanged>
                            <generatorName>spring</generatorName>
                            <apiPackage>${openApiApiPackage}</apiPackage>
                            <modelPackage>${openApiModelPackage}</modelPackage>
                            <modelNameSuffix>DTO</modelNameSuffix>
                            <addCompileSourceRoot>true</addCompileSourceRoot>
                            <generateSupportingFiles>false</generateSupportingFiles>
                            <typeMappings>
                                <typeMapping>Double=java.math.BigDecimal</typeMapping>
                            </typeMappings>
                            <configOptions>
                                <useSpringBoot3>true</useSpringBoot3>
                                <documentationProvider>none</documentationProvider>
                                <openApiNullable>false</openApiNullable>
                                <useOptional>false</useOptional>
                                <useTags>true</useTags>
                                <interfaceOnly>true</interfaceOnly>
                                <skipDefaultInterface>true</skipDefaultInterface>
                                <delegatePattern>false</delegatePattern>
                                <sortParamsByRequiredFlag>false</sortParamsByRequiredFlag>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!-- jpa -->
		<dependency>
			<groupId>org.hibernate.orm</groupId>
			<artifactId>hibernate-ant</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- kafka -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-stream-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-schema</artifactId>
			<version>${spring-cloud-stream-schema.version}</version>
		</dependency>
        <!-- avro -->
        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>${avro.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-avro</artifactId>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-avro-serializer</artifactId>
            <version>5.3.0</version>
        </dependency>
		<!-- utils -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
			<version>${jakarta.validation-api.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok-mapstruct-binding</artifactId>
			<version>${lombok-mapstruct-binding.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- swagger -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi-starter-webmvc-ui.version}</version>
		</dependency>

		<!-- test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webflux</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-core</artifactId>
			<version>${karate.version}</version>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-api</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Adding the engine dependency to the surefire-plugin unfortunately does not work in the current version. -->
		<!-- https://www.archunit.org/userguide/html/000_Index.html#_junit_5 -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-engine</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
